import re


PERSONEL_COLUMNS = [
    "uid",  # unique officer identifier, generated by MD5 checksum multiple columns
    "last_name",  # lowercase last name
    "middle_name",  # lowercase middle name
    "middle_initial",  # lowercase middle initial
    "first_name",  # lowercase first name
    "employee_id",  # employee ID given to the person by the agency.
    "birth_year",  # year of birth
    "birth_date",  # date of birth
]

PERSONEL_HISTORY_COLUMNS = [
    "uid",  # officer unique identifier
    "badge_no",  # badge number
    "department_code",  # department code or id
    "department_desc",  # department title or description
    "rank_code",  # rank code
    "rank_desc",  # rank title or description
    "rank_date",
    "hire_date",  # hire date
    "term_date",  # termination date
    "pay_prog_start_date",  # pay program start date
    "pay_effective_date",  # pay effective date,
    "employment_status",
    "annual_salary",  # annual salary
    "hourly_salary",  # hourly salary
    "data_production_year",  # year of data
    "agency",  # name of agency (e.g. "New Orleans CSD")
]

COMPLAINT_COLUMNS = [
    "Last Name", "First Name", "Middle Name", "Badge #", "Employee ID #",
    "Incident Type", "Complaint Tracking Number", "Date Complaint Occurred",
    "Date Complaint Received", "Date Complaint Investigation Complete",
    "Investigation Status", "Disposition", "Complaint Classification",
    "Bureau of Complainant", "Division of Complainant", "Unit of Complainant",
    "Unit Additional Details of Complainant", "Working Status of Complainant",
    "Shift of Complainant", "Rule Violation", "Paragraph Violation",
    "Unique Officer Allegation ID", "Officer Race Ethnicity", "Officer Gender",
    "Officer Age", "Officer Years of Service", "Complainant Gender",
    "Complainant Ethnicity", "Complainant Age"
]


def clean_column_names(df):
    """
    Remove unnamed columns and convert to snake case
    """
    df = df[[col for col in df.columns if not col.startswith("Unnamed:")]]
    df.columns = [
        re.sub(r"[\s\W]+", "_", col.strip()).lower()
        for col in df.columns]
    return df


def rearrange_personel_columns(df):
    existing_cols = set(df.columns)
    return df[[col for col in PERSONEL_COLUMNS if col in existing_cols]]\
        .drop_duplicates(ignore_index=True)


def rearrange_personel_history_columns(df):
    existing_cols = set(df.columns)
    return df[[
        col for col in PERSONEL_HISTORY_COLUMNS if col in existing_cols
    ]].drop_duplicates(ignore_index=True)


def rearrange_complaint_columns(df):
    existing_cols = set(df.columns)
    return df[[col for col in COMPLAINT_COLUMNS if col in existing_cols]]\
        .drop_duplicates(ignore_index=True)
