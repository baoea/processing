{
  // Place your PPACT workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Clean script": {
    "scope": "python",
    "prefix": "clean",
    "body": [
      "from lib.columns import clean_column_names",
      "from lib.path import data_file_path, ensure_data_dir",
      "import pandas as pd",
      "import sys",
      "sys.path.append('../')",
      "",
      "",
      "def clean():",
      "    df = pd.read_csv(data_file_path(",
      "        '$1'",
      "    ))",
      "    df = clean_column_names(df)",
      "    return df",
      "",
      "",
      "if __name__ == '__main__':",
      "    df = clean()",
      "    ensure_data_dir('clean')",
      "    df.to_csv(data_file_path(",
      "        'clean/$2.csv'",
      "    ), index=False)"
    ],
    "description": "Data clean script"
  },
  "Match script": {
    "scope": "python",
    "prefix": "match",
    "body": [
      "from lib.match import ThresholdMatcher, JaroWinklerSimilarity, ColumnsIndex",
      "from lib.path import data_file_path, ensure_data_dir",
      "import pandas as pd",
      "import sys",
      "sys.path.append('../')"
    ],
    "description": "Data match script"
  },
  "Prepare POST data": {
    "scope": "python",
    "prefix": "prepare_post",
    "body": [
      "def prepare_post_data():",
      "    post = pd.read_csv(data_file_path('clean/pprr_post_2020_11_06.csv'))",
      "    post = post[post.agency == '$1']",
      "    duplicated_uids = set(post.loc[post.uid.duplicated(), 'uid'].to_list())",
      "    post = post.set_index('uid', drop=False)",
      "    level_1_cert_dates = post.loc[",
      "        post.uid.isin(duplicated_uids) & (post.level_1_cert_date.notna()),",
      "        'level_1_cert_date']",
      "    for idx, value in level_1_cert_dates.iteritems():",
      "        post.loc[idx, 'level_1_cert_date'] = value",
      "    post = post.sort_values('last_pc_12_qualification_date', ascending=False)",
      "    return post[~post.index.duplicated(keep='first')]"
    ],
    "description": "Prepare POST data for matching"
  }
}
